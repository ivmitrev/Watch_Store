@page "/Cart"
@using WatchStore.Services
@using WatchStore.Components
@inject ICartItemService _iCartItemService
@inject IProductService _iProductService
<h3>Shopping Cart</h3>

@if(cartItems == null)
{
    <LoadingIcon />
}
else if(cartItems.Count() == 0)
{
    <h3 class="text-danger">Shopping Cart is empty!</h3>
}
else 
{
    
    <div style="display: flex; justify-content: space-around; width: 100%; height: 100vh; gap: 20px;">
        <div style="display: flex; flex-direction: column; height: 100%; width: 70%; overflow-y: auto; padding: 10px;">
            @foreach (var cartItem in cartItems)
            {
               
                <div style="display: flex; align-items: center; height: 100px; width: 100%; gap: 25px; margin-bottom: 15px; border-bottom: 1px solid #ccc;">
                    <img src="@cartItem.Image" style="max-height: 100%; max-width: 20vh; object-fit: contain;" alt="@cartItem.Name">
                    <div style="flex-grow: 1;display: flex;flex-direction: column;gap: 2px;">
                        <p style="font-size: 18px;margin: 0">@cartItem.Name</p>
                        <p style="font-size: 16px;margin: 0 ">@cartItem.Description</p>
                        <p style="font-size: 15px;margin: 0; color: #212121;">@cartItem.TotalPrice.ToString("N0", new System.Globalization.CultureInfo("bg-BG")) BGN</p>
                    </div>
                    <div style="display: flex;flex-direction: column; gap: 10px; width: 10vw;">
                        <button @onclick="@(() => DeleteCartItem(cartItem.Id))" class="btn btn-danger">Remove</button>
                        <div style="display: flex;flex-direction: row;justify-content: center;gap: 4px">
                            <InputNumber @bind-Value="@cartItem.Quantity" class="form-control"/>
                            <button class="btn btn-primary" @onclick="@(() => UpdateCartItemQuantity(cartItem))">Update</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div style="display: flex; justify-content: flex-start; align-items: center; flex-direction: column; width: 30%; padding: 20px; border-left: 1px solid #ccc;">
            <p style="font-size: 20px; font-weight: bold;">Cart Total</p>
            <b>
                <p style="font-size: 24px;">Total - @cartItems.Sum(x => x.TotalPrice).ToString("N0", new System.Globalization.CultureInfo("bg-BG")) BGN</p>
            </b>
            <button class="btn btn-success">Proceed to Checkout</button>
        </div>
    </div>

}


@code 
{
    private IEnumerable<CartItemDto> cartItems;
    private IEnumerable<ProductDto> productItems;
    protected override async Task OnInitializedAsync()
    {
        cartItems = await _iCartItemService.GetCartItems();
    }
    
    private async Task UpdateCartItemQuantity(CartItemDto cartItem)
    {
        if (cartItem != null)
        {
            var productItem = await _iProductService.GetProduct(cartItem.ProductId);
            if (productItem != null)
            {
                if (cartItem.Quantity < 1 || cartItem.Quantity > productItem.Quantity)
                {
                    cartItem.Quantity = 1;
                }
                else
                {
                    await _iCartItemService.UpdateCartItemQuantity(cartItem.Id, new CartItemQuantityUpdateDto()
                    {
                        ProductId = cartItem.ProductId,
                        Quantity = cartItem.Quantity
                    });

                    cartItems = await _iCartItemService.GetCartItems();
                    StateHasChanged();
                }
            }
        }

       
    }

    private async Task DeleteCartItem(int id)
    {
        await _iCartItemService.DeleteCartItem(id);
        cartItems = await _iCartItemService.GetCartItems();
        StateHasChanged();
    }

}